@page "/acompanharEncomenda/encomenda{idEncomenda:int}"
@inject IOrderService OrderService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<div class="bg-gray-200 rounded-lg p-4 flex flex-col gap-4 max-w-5xl mx-auto">
    @if (Encomenda != null)
    {
        <div>
            <p class="text-base font-bold text-black">Encomenda #@idEncomenda</p>
            <div class="flex items-center gap-2 mt-2">
                <span class="w-4 h-4 rounded-full" style="background-color: @Encomenda.GetStatusColor()"></span>
                <span class="text-base font-bold text-black">- @Encomenda.Estado.Nome</span>
            </div>
            <p class="mt-2 text-base font-bold text-black">Iniciada em: @Encomenda.Data_Inicio.ToShortDateString()</p>
        </div>

        <div class="flex flex-col gap-4">
            @if (ProdutosEncomenda != null && ProdutosEncomenda.Any())
            {
                @foreach (var produtoEncomenda in ProdutosEncomenda.Select((produto, index) => new { produto, index }))
                {
                    <div class="bg-gray-300 rounded-lg p-4 flex justify-between items-center shadow-md">
                        <div>
                            <p class="text-base font-bold text-black">Desktop - #@(produtoEncomenda.index + 1)</p>
                            <p class="text-sm text-black">@produtoEncomenda.produto.Desktop?.Descricao</p>
                            <div class="flex items-center gap-2 mt-2">
                                <span class="w-4 h-4 rounded-full" style="background-color: @produtoEncomenda.produto.GetStatusColor()"></span>
                                <span class="text-sm text-black">- @produtoEncomenda.produto.Estado</span>
                            </div>
                        </div>
                        <button class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700"
                                @onclick="() => NavigateToProduct(produtoEncomenda.produto.Desktop_idDesktop)">
                            Visualizar Montagem de Produto
                        </button>
                    </div>
                }
            }
            else
            {
                <p class="text-center text-gray-500">Nenhum produto encontrado para esta encomenda.</p>
            }
        </div>

        <div class="flex justify-center mt-4">
            <a href="/encMenu" class="bg-gray-800 text-white px-6 py-3 rounded-md hover:bg-gray-700">
                Voltar
            </a>
        </div>
    }
</div>

@code {
    [Parameter] public int idEncomenda { get; set; }
    private EncomendaModel? Encomenda { get; set; }
    private List<DesktopEncomendaModel> ProdutosEncomenda { get; set; } = new();
    private int Id { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Encomenda = await OrderService.GetOrderByIdAsync(idEncomenda);

        if (Encomenda != null)
        {
            var ourProvider = (Auth.AuthMain)AuthProvider;
            Id = await ourProvider.GetID() ?? 0;

            Encomenda.Utilizador_idUtilizador = Id;
            ProdutosEncomenda = await OrderService.GetDesktopEncomendaByOrderIdAsync(idEncomenda);
        }
    }


    private void NavigateToProduct(int desktopId)
    {
        NavigationManager.NavigateTo($"/acompanharEncomenda/encomenda{idEncomenda}/desktop{desktopId}");
    }
}