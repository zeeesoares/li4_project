@page "/nova-encomenda"
@inject IOrderService OrderService
@inject IProductService ProductService
@inject AuthenticationStateProvider AuthProvider
@inject ISnackbar Snackbar
@inject IPecaService PecaService

<div class="flex justify-center items-center mt-4">
    <div class="text-center">
        <h1 class="text-2xl font-bold">Nova Encomenda</h1>
    </div>
</div>

<div class="bg-gray-200 rounded-lg p-4 max-w-5xl mx-auto flex flex-col gap-4 mt-4">
    @foreach (var item in SelectedProducts)
    {
        <div class="bg-gray-300 rounded-lg p-4 flex justify-between items-center mb-4">
            <div>
                <select class="bg-white border rounded-md p-2 mb-2" @bind="item.Desktop_idDesktop" @bind:event="onchange">
                    @foreach (var desktop in Catalog.Where(d => !SelectedProducts.Any(sp => sp.Desktop_idDesktop == d.idDesktop) || d.idDesktop == item.Desktop_idDesktop))
                    {
                        <option value="@desktop.idDesktop">@desktop.Descricao</option>
                    }
                </select>


                <p class="text-sm text-gray-600">Preço: @(Catalog.FirstOrDefault(d => d.idDesktop == item.Desktop_idDesktop)?.Preco.ToString("C") ?? "N/A")</p>
            </div>
            <div class="flex items-center gap-4">
                <label class="text-sm font-medium">Quantidade</label>
                <select class="bg-white border rounded-md p-2"
                        @bind="item.Quantidade_Prod">
                    @for (int i = 1; i <= 100; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
            <div>
                <button class="bg-gray-800 rounded-full p-4 flex items-center justify-center hover:bg-gray-400 text-white"
                        @onclick="@(() => RemoveProduct(item))">
                    🗑
                </button>
            </div>
        </div>
    }

    <button class="bg-gray-300 rounded-full p-4 flex items-center justify-center hover:bg-gray-400"
            @onclick="AddNewProduct">
        +
    </button>

    <button class="bg-gray-800 text-white px-6 py-3 rounded-md hover:bg-gray-700 mt-4"
            @onclick="SubmitOrder">
        Realizar Encomenda
    </button>
</div>

@code {
    private List<DesktopEncomendaModel> SelectedProducts { get; set; } = new();
    private List<DesktopModel> Catalog { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Catalog = await ProductService.GetAllProducts();
    }

    private void AddNewProduct()
    {
        var availableProducts = Catalog.Where(d => !SelectedProducts.Any(sp => sp.Desktop_idDesktop == d.idDesktop)).ToList();

        if (availableProducts.Any())
        {
            SelectedProducts.Add(new DesktopEncomendaModel
                {
                    Desktop_idDesktop = availableProducts.First().idDesktop,
                    Quantidade_Prod = 1,
                    Estado = "Espera"
                });
        }
        else
        {
            Snackbar.Add("Não há mais produtos disponíveis para adicionar.", Severity.Warning);
        }
    }

    private async Task SubmitOrder()
    {
        try
        {
            if (SelectedProducts.Any())
            {
                var products = SelectedProducts.Select(product => new DesktopEncomendaModel
                    {
                        Desktop_idDesktop = product.Desktop_idDesktop,
                        Quantidade_Prod = product.Quantidade_Prod
                    }).ToList();

                bool isStockAvailable = await PecaService.CheckStockForProductsAsync(products);

                int orderState = isStockAvailable ? 2 : 1;

                var newOrder = new EncomendaModel
                    {
                        Data_Inicio = DateTime.UtcNow,
                        Estado_idEstado = orderState,
                        Utilizador_idUtilizador = await GetCurrentUserId(),
                    };

                await OrderService.CreateOrderAsync(newOrder, products);

                Snackbar.Add("Encomenda realizada com sucesso!", Severity.Success);

                SelectedProducts.Clear();
            }
            else
            {
                Snackbar.Add("Adicione pelo menos um produto antes de submeter a encomenda.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao realizar a encomenda: {ex.Message}", Severity.Error);
        }
    }

    private async Task<int> GetCurrentUserId()
    {
        var auth = (Auth.AuthMain)AuthProvider;
        return await auth.GetID() ?? 0;
    }

    private void RemoveProduct(DesktopEncomendaModel product)
    {
        SelectedProducts.Remove(product);
    }
}
