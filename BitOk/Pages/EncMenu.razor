@page "/encMenu"
@inject IOrderService OrderService

<div class="flex justify-center items-center mt-4">
    <div class="text-center">
        <h1 class="text-2xl font-bold">Encomendas</h1>
    </div>
</div>

<div class="bg-gray-200 rounded-lg p-4 max-w-5xl mx-auto flex flex-col gap-4 mt-4">

    <div class="flex space-x-4 border-b">
        <button class="py-2 px-4 text-sm font-bold relative"
                style="@(ActiveTab == 1 ? "text-black" : "text-gray-500")"
                @onclick="() => ChangeTab(1)">
            Em Espera
            <span class="absolute left-0 bottom-0 w-0 h-1 bg-black transition-all duration-300 @((ActiveTab == 1) ? "w-full" : "") hover:w-full"></span>
        </button>

        <button class="py-2 px-4 text-sm font-bold relative"
                style="@(ActiveTab == 2 ? "text-black" : "text-gray-500")"
                @onclick="() => ChangeTab(2)">
            Preparação
            <span class="absolute left-0 bottom-0 w-0 h-1 bg-black transition-all duration-300 @((ActiveTab == 2) ? "w-full" : "") hover:w-full"></span>
        </button>

        <button class="py-2 px-4 text-sm font-bold relative"
                style="@(ActiveTab == 3 ? "text-black" : "text-gray-500")"
                @onclick="() => ChangeTab(3)">
            Concluídas
            <span class="absolute left-0 bottom-0 w-0 h-1 bg-black transition-all duration-300 @((ActiveTab == 3) ? "w-full" : "") hover:w-full"></span>
        </button>
    </div>

    <div>
        @foreach (var order in GetOrdersByActiveTab())
        {
            try
            {
                <div class="bg-gray-300 rounded-lg p-4 flex justify-between items-center mb-4">
                    <div>
                        <p class="text-base font-bold text-black">Encomenda #@order.idEncomenda</p>
                        <div class="flex items-center gap-2 mt-2">
                            <span class="w-4 h-4 rounded-full" style="background-color: @GetStatusColor(order.Estado_idEstado)"></span>
                        </div>
                        <p class="mt-2 text-base font-bold text-black">Iniciada em: @order.Data_Inicio</p>
                    </div>

                    <div class="flex items-center gap-4">
                        <button class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700">
                            Cancelar Encomenda
                        </button>

                        <button class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700">
                            Acompanhar Encomenda
                        </button>
                    </div>
                </div>
            }
            catch (Exception ex)
            {
                <p>Erro ao carregar a encomenda: @ex.Message</p>
            }
        }

    </div>
</div>

@code {
    private int ActiveTab { get; set; } = 1;
    private List<EncomendaModel> PendingOrders = new List<EncomendaModel>();
    private List<EncomendaModel> PreparationOrders = new List<EncomendaModel>();
    private List<EncomendaModel> CompletedOrders = new List<EncomendaModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        string status = ActiveTab switch
        {
            1 => "Espera",
            2 => "Preparação",
            3 => "Completa",
            _ => ""
        };

        PendingOrders = await OrderService.GetOrdersByStatusAsync(1);
        PreparationOrders = await OrderService.GetOrdersByStatusAsync(2);
        CompletedOrders = await OrderService.GetOrdersByStatusAsync(3);
    }

    private IEnumerable<EncomendaModel> GetOrdersByActiveTab()
    {
        return ActiveTab switch
        {
            1 => PendingOrders ?? new List<EncomendaModel>(),
            2 => PreparationOrders ?? new List<EncomendaModel>(),
            3 => CompletedOrders ?? new List<EncomendaModel>(),
            _ => new List<EncomendaModel>()
        };
    }

    private void ChangeTab(int tabIndex)
    {
        ActiveTab = tabIndex;
        LoadOrdersAsync();
    }

    private string GetStatusColor(int state)
    {
        return state switch
        {
            1 => "red",
            2 => "yellow",
            3 => "green",
            _ => "blue"
        };
    }
}
