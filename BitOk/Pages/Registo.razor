@page "/registo"
@layout NoLayout

@using Microsoft.AspNetCore.Components.Forms
@using System.Threading.Tasks
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject Data.Services.IUserManager _db
@inject IJSRuntime js
@inject NavigationManager NavManager

<div class="flex flex-col justify-center items-center h-screen">
    <div class="flex flex-col space-y-2 items-center justify-center mb-6">
        <img src="assets/logo.png" alt="BitOk" style="width: 200px;">
    </div>

    <div class="w-full max-w-[430px] bg-[#d1d1d1] rounded-lg px-8 pt-6 pb-8 mb-4 shadow-md">
        <p class="text-2xl font-extrabold text-center mb-6">Registar</p>
        <EditForm EditContext="_registerFormContext" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-4">
                <label for="nome" class="block text-gray-700 text-left mb-2">Nome</label>
                <InputText id="nome" @bind-Value="_registerModel.Nome" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700 mb-2" placeholder="Nome" style="height: 50px;" />
                <ValidationMessage For="() => _registerModel.Nome" class="text-red-500 text-xs mt-1" />
            </div>

            <div class="mb-4">
                <label for="username" class="block text-gray-700 text-left mb-2">Username</label>
                <InputText id="username" @bind-Value="_registerModel.Username" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700 mb-2" placeholder="Username" style="height: 50px;" />
                <ValidationMessage For="() => _registerModel.Username" class="text-red-500 text-xs mt-1" />
            </div>

            <div class="mb-4 relative">
                <label for="password" class="block text-gray-700 text-left mb-2">Password</label>
                <InputText id="password" @bind-Value="_registerModel.Password" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" type="@inputType" placeholder="Password" style="height: 50px;" />
                <svg @onclick="TogglePasswordVisibility" class="h-4 w-4 absolute right-3 top-1/2 translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.99902 3L20.999 21M9.8433 9.91364C9.32066 10.4536 8.99902 11.1892 8.99902 12C8.99902 13.6569 10.3422 15 11.999 15C12.8215 15 13.5667 14.669 14.1086 14.133M6.49902 6.64715C4.59972 7.90034 3.15305 9.78394 2.45703 12C3.73128 16.0571 7.52159 19 11.9992 19C13.9881 19 15.8414 18.4194 17.3988 17.4184M10.999 5.04939C11.328 5.01673 11.6617 5 11.9992 5C16.4769 5 20.2672 7.94291 21.5414 12C21.2607 12.894 20.8577 13.7338 20.3522 14.5" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <ValidationMessage For="() => _registerModel.Password" class="text-red-500 text-xs mt-1" />
            </div>

            <div class="flex flex-col space-y-2 items-center justify-center">
                <button class="bg-black hover:bg-black text-white font-bold py-2.5 px-10 rounded-md focus:outline-none focus:shadow-outline" type="submit">
                    <p class="font-extrabold">Confirmar</p>
                </button>
                <div class="text-xs text-center">
                    <p>Já tem conta? <NavLink href="/login" class="text-blue-500 hover:text-blue-700">Entrar em BitOk</NavLink></p>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private class RegisterModel
    {
        [Required(ErrorMessage = "O campo nome é obrigatório")]
        public string Nome { get; set; } 
        [Required(ErrorMessage = "O campo username é obrigatório")]
        public string Username { get; set; } 
        [Required(ErrorMessage = "O campo password é obrigatório"), MinLength(8, ErrorMessage = "A password deve ter no mínimo 8 caracteres")]
        public string Password { get; set; }

        public RegisterModel()
        {
            Nome = "";
            Username = "";
            Password = "";
        }
    }

    private bool showPassword = false;
    private string inputType => showPassword ? "text" : "password";
    private void TogglePasswordVisibility() => showPassword = !showPassword;

    private EditContext? _registerFormContext { get; set; }
    private ValidationMessageStore? _registerFormValidationMessageStore { get; set; }

    private RegisterModel _registerModel = new RegisterModel();

    protected override void OnInitialized()
    {
        _registerFormContext = new EditContext(_registerModel);
        _registerFormValidationMessageStore = new ValidationMessageStore(_registerFormContext);
    }

    private async Task RegisterUser()
    {
        await _db.CreateUser(_registerModel.Nome, _registerModel.Username, _registerModel.Password, "client");
        await js.InvokeVoidAsync("alert", "Conta criada com sucesso!");
        NavManager.NavigateTo("/login", true);
    }
}

