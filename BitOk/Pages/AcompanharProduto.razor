@page "/acompanharEncomenda/encomenda{idEncomenda:int}/desktop{idDesktop:int}"
@using BitOk.Data.Models
@using System.Collections.Generic
@inject IOrderService OrderService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject NavigationManager NavigationManager

@if (CurrentProduct == null)
{
    <p>Carregando produtos...</p>
}
else {
    <div class="max-w-4xl mx-auto">
        <div class="bg-gray-300 p-4 rounded-lg">
            <div class="flex justify-between items-center">
                <div class="text-left w-1/3">
                    <span class="text-lg font-semibold">Peça: @CurrentProduct.GetCurrentPieceName()</span>
                </div>
                <div class="text-center w-1/3">
                    <span class="text-lg font-semibold">Passo número @(CurrentStepIndex + 1)</span>
                </div>
                <div class="text-right w-1/3">
                    <span class="text-lg font-semibold">Estado: @CurrentProduct.Estado</span>
                </div>
            </div>
        </div>

        <div class="mt-12">
            <div class="relative h-2 bg-gray-200 rounded-full w-3/4 mx-auto">
                <div class="absolute top-0 left-0 h-2 bg-green-500 rounded-full" style="width: @(100 * (CurrentStepIndex + 1) / Steps.Count)%"></div>
            </div>
        </div>

        <div class="mt-12 flex justify-between items-center">
            <button class="px-2 py-2 text-gray-700 hover:text-gray-900" @onclick="PreviousStep" disabled="@(CurrentStepIndex == 0)">
                &#8592; Previous
            </button>

            <div class="flex justify-center">
                <img src="/assets/estados/@(CurrentProduct.GetGifName()).gif"
                     alt="Product Image"
                     class="w-96 h-auto object-contain border-4 border-gray-800 rounded-lg" />
            </div>


            <button class="px-2 py-2 text-gray-700 hover:text-gray-900" @onclick="NextStep" disabled="@(CurrentStepIndex == Steps.Count - 1)">
                Next &#8594;
            </button>
        </div>

        <div class="flex justify-center mt-12">
            <div class="flex space-x-1">
                @for (int i = 0; i < Steps.Count; i++)
                {
                    <div class="w-3 h-3 rounded-full @(i == CurrentStepIndex ? "bg-gray-800" : "bg-gray-400")"></div>
                }
            </div>
        </div>
    </div>

    <div class="flex justify-center mt-12">
        <button class="bg-gray-800 text-white px-6 py-3 rounded-md hover:bg-gray-700" @onclick="GoBackToOrder">
            Voltar
        </button>
    </div>

}

@code {
    [Parameter] public int idEncomenda { get; set; }
    [Parameter] public int idDesktop { get; set; }
    private DesktopEncomendaModel? CurrentProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentProduct = await OrderService.GetDesktopEncomendaByIdAsync(idDesktop, idEncomenda);
    }

    private List<string> Steps = new List<string>
    {
        "Espera",
        "Montar CPU",
        "Montar RAM",
        "Montar Disco",
        "Montar Cooler",
        "Montar Motherboard",
        "Montar GPU",
        "Montar Fonte de Alimentação",
        "Montar Caixa",
        "Pronto"
    };

    private int CurrentStepIndex => Steps.IndexOf(CurrentProduct.Estado);

    private void PreviousStep()
    {
        if (CurrentStepIndex > 0)
        {
            CurrentProduct.Estado = Steps[CurrentStepIndex - 1];
        }
    }

    private void NextStep()
    {
        if (CurrentStepIndex < Steps.Count - 1)
        {
            CurrentProduct.Estado = Steps[CurrentStepIndex + 1];
        }
    }

    private async Task GoBackToOrder()
    {
        NavigationManager.NavigateTo($"/acompanharEncomenda/encomenda{CurrentProduct.Encomenda_idEncomenda}");
    }
}